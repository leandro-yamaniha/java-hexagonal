version: '3.8'

# Micronaut Backend Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.micronaut.yml up

services:
  # Nginx API Gateway for Micronaut
  nginx-api-micronaut:
    image: nginx:alpine
    container_name: restaurant-nginx-api-micronaut
    ports:
      - "8083:80"
    volumes:
      - ./nginx/nginx-api-micronaut.conf:/etc/nginx/nginx.conf:ro
    networks:
      - restaurant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Micronaut Instance 1
  micronaut-app-1:
    build:
      context: ../backend/micronaut-app
      dockerfile: Dockerfile
    container_name: micronaut-app-1
    environment:
      DATASOURCES_DEFAULT_URL: jdbc:mysql://mysql:3306/restaurant_db
      DATASOURCES_DEFAULT_USERNAME: restaurant_user
      DATASOURCES_DEFAULT_PASSWORD: restaurant123
      REDIS_URI: redis://redis:6379
      MICRONAUT_SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  # Micronaut Instance 2
  micronaut-app-2:
    build:
      context: ../backend/micronaut-app
      dockerfile: Dockerfile
    container_name: micronaut-app-2
    environment:
      DATASOURCES_DEFAULT_URL: jdbc:mysql://mysql:3306/restaurant_db
      DATASOURCES_DEFAULT_USERNAME: restaurant_user
      DATASOURCES_DEFAULT_PASSWORD: restaurant123
      REDIS_URI: redis://redis:6379
      MICRONAUT_SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped
