events {
    worker_connections 1024;
}

http {
    # Define upstream backends (load balancer)
    upstream backend_spring {
        # Múltiplas instâncias do Spring Boot
        server spring-boot-app-1:8080;
        server spring-boot-app-2:8080;
    }

    upstream backend_quarkus {
        # Múltiplas instâncias do Quarkus
        server quarkus-app-1:8080;
        server quarkus-app-2:8080;
    }

    upstream backend_micronaut {
        # Múltiplas instâncias do Micronaut
        server micronaut-app-1:8080;
        server micronaut-app-2:8080;
    }

    # Configuração do servidor principal
    server {
        listen 80;
        server_name localhost;

        # Configuração de tipos MIME
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Frontend - Servir arquivos estáticos Angular
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # API Spring Boot - Proxy reverso com load balancing
        location /api/spring/ {
            rewrite ^/api/spring/(.*) /api/v1/$1 break;
            proxy_pass http://backend_spring;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Quarkus - Proxy reverso com load balancing
        location /api/quarkus/ {
            rewrite ^/api/quarkus/(.*) /api/v1/$1 break;
            proxy_pass http://backend_quarkus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Micronaut - Proxy reverso com load balancing
        location /api/micronaut/ {
            rewrite ^/api/micronaut/(.*) /api/v1/$1 break;
            proxy_pass http://backend_micronaut;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Configuração de logs
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}
