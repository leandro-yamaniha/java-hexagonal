events {
    worker_connections 1024;
}

http {
    # Upstream for Micronaut instances
    upstream backend_micronaut {
        server micronaut-app-1:8080;
        server micronaut-app-2:8080;
    }

    # API Gateway Server for Micronaut
    server {
        listen 80;
        server_name localhost;

        # Configuração de logs
        access_log /var/log/nginx/micronaut-api-access.log;
        error_log /var/log/nginx/micronaut-api-error.log;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Micronaut API Gateway OK\n";
            add_header Content-Type text/plain;
        }

        # Micronaut API - Load balanced entre 2 instâncias
        location /api/ {
            rewrite ^/api/(.*) /api/v1/$1 break;
            proxy_pass http://backend_micronaut;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        }

        # Default response
        location / {
            return 200 '{"framework": "Micronaut", "instances": 2, "status": "running"}\n';
            add_header Content-Type application/json;
        }
    }
}
