version: '3.8'

services:
  # ========================================
  # MySQL Database
  # ========================================
  mysql:
    image: mysql:8.0
    container_name: restaurant-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: restaurant_db
      MYSQL_USER: restaurant_user
      MYSQL_PASSWORD: restaurant123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Redis Cache
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: restaurant-redis
    ports:
      - "6379:6379"
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Spring Boot Backend (Escalável até 2 instâncias)
  # ========================================
  spring-boot-app-1:
    build:
      context: ../backend/spring-boot-app
      dockerfile: Dockerfile
    container_name: spring-boot-app-1
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/restaurant_db
      SPRING_DATASOURCE_USERNAME: restaurant_user
      SPRING_DATASOURCE_PASSWORD: restaurant123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  spring-boot-app-2:
    build:
      context: ../backend/spring-boot-app
      dockerfile: Dockerfile
    container_name: spring-boot-app-2
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/restaurant_db
      SPRING_DATASOURCE_USERNAME: restaurant_user
      SPRING_DATASOURCE_PASSWORD: restaurant123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  # ========================================
  # Quarkus Backend (Escalável até 2 instâncias)
  # ========================================
  quarkus-app-1:
    build:
      context: ../backend/quarkus-app
      dockerfile: Dockerfile
    container_name: quarkus-app-1
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://mysql:3306/restaurant_db
      QUARKUS_DATASOURCE_USERNAME: restaurant_user
      QUARKUS_DATASOURCE_PASSWORD: restaurant123
      QUARKUS_REDIS_HOSTS: redis:6379
      QUARKUS_HTTP_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  quarkus-app-2:
    build:
      context: ../backend/quarkus-app
      dockerfile: Dockerfile
    container_name: quarkus-app-2
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://mysql:3306/restaurant_db
      QUARKUS_DATASOURCE_USERNAME: restaurant_user
      QUARKUS_DATASOURCE_PASSWORD: restaurant123
      QUARKUS_REDIS_HOSTS: redis:6379
      QUARKUS_HTTP_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  # ========================================
  # Micronaut Backend (Escalável até 2 instâncias)
  # ========================================
  micronaut-app-1:
    build:
      context: ../backend/micronaut-app
      dockerfile: Dockerfile
    container_name: micronaut-app-1
    environment:
      DATASOURCES_DEFAULT_URL: jdbc:mysql://mysql:3306/restaurant_db
      DATASOURCES_DEFAULT_USERNAME: restaurant_user
      DATASOURCES_DEFAULT_PASSWORD: restaurant123
      REDIS_URI: redis://redis:6379
      MICRONAUT_SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  micronaut-app-2:
    build:
      context: ../backend/micronaut-app
      dockerfile: Dockerfile
    container_name: micronaut-app-2
    environment:
      DATASOURCES_DEFAULT_URL: jdbc:mysql://mysql:3306/restaurant_db
      DATASOURCES_DEFAULT_USERNAME: restaurant_user
      DATASOURCES_DEFAULT_PASSWORD: restaurant123
      REDIS_URI: redis://redis:6379
      MICRONAUT_SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  # ========================================
  # Nginx (Reverse Proxy + Load Balancer + Frontend)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: restaurant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - spring-boot-app-1
      - spring-boot-app-2
      - quarkus-app-1
      - quarkus-app-2
      - micronaut-app-1
      - micronaut-app-2
    networks:
      - restaurant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  restaurant-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
