version: '3.8'

# Base infrastructure: MySQL, Redis, Nginx
# Use with specific backend compose files:
#   docker-compose -f docker-compose.yml -f docker-compose.spring.yml up
#   docker-compose -f docker-compose.yml -f docker-compose.quarkus.yml up
#   docker-compose -f docker-compose.yml -f docker-compose.micronaut.yml up

services:
  # MySQL Database (Shared)
  mysql:
    image: mysql:8.0
    container_name: restaurant-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: restaurant_db
      MYSQL_USER: restaurant_user
      MYSQL_PASSWORD: restaurant123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Shared)
  redis:
    image: redis:7-alpine
    container_name: restaurant-redis
    ports:
      - "6379:6379"
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Frontend (Serve arquivos estáticos)
  # O nginx-api agora está em cada docker-compose específico (spring, quarkus, micronaut)
  nginx-frontend:
    image: nginx:alpine
    container_name: restaurant-nginx-frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-frontend.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - restaurant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  restaurant-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
